<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Exploring meta-learning as an approach to teaching models how to learn, with practical insights from building KShield and continuous adaptation systems.">
    <meta name="keywords" content="AI, Machine Learning, Research, Education, Technology, Ethics">
    <meta name="author" content="Omega Makena">
    
    <!-- SEO -->
    <meta name="robots" content="index, follow">
    <meta name="googlebot" content="index, follow">
    <link rel="canonical" href="https://omegamakena.co.ke/blog/ai-ml/meta-learning-learning-how-to-learn">
    
    <!-- Open Graph / Social Media -->
    <meta property="og:type" content="website">
    <meta property="og:url" content="https://omegamakena.co.ke/blog/ai-ml/meta-learning-learning-how-to-learn">
    <meta property="og:title" content="Omega Makena - Quantitative Researcher | AI Systems for Economic Simulation | FinTech Modeling | Self-Learning Autonomous Agents">
    <meta property="og:description" content="Personal website and portfolio of Omega Makena, AI researcher and developer passionate about ethical AI and education technology.">
    <meta property="og:image" content="https://omegamakena.co.ke/static/img/social-card.jpg">
    <meta property="og:site_name" content="Omega Makena">
    
    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="Omega Makena">
    <meta name="twitter:description" content="Quantitative Researcher | AI Systems for Economic Simulation | FinTech Modeling | Self-Learning Autonomous Agents">
    <meta name="twitter:image" content="https://omegamakena.co.ke/static/img/social-card.jpg">
    
    <title>Meta-Learning - Learning How to Learn - Omega Makena</title>
    
    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="/static/img/favicon.ico">
    <link rel="apple-touch-icon" sizes="180x180" href="/static/img/apple-touch-icon.png">
    
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;600;700&family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- TailwindCSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    colors: {
                        light: {
                            bg: '#F9FAFB',
                            card: '#FFFFFF',
                            text: '#1C1C1C',
                            muted: '#6B7280',
                            accent: '#1E3A8A',
                            link: '#2563EB',
                            highlight: '#D97706'
                        },
                        dark: {
                            bg: '#0F172A',
                            card: '#1E293B',
                            text: '#E5E7EB',
                            muted: '#94A3B8',
                            accent: '#93C5FD',
                            link: '#A78BFA',
                            highlight: '#FBBF24'
                        }
                    },
                    fontFamily: {
                        'display': ['"Playfair Display"', 'serif'],
                        'body': ['Inter', 'system-ui', 'sans-serif']
                    }
                }
            }
        }
    </script>
    
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        h1, h2, h3, h4, h5, h6 {
            font-family: 'Playfair Display', serif;
        }
        
        /* Smooth transitions */
        * {
            transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
        }
        
        /* Dark mode styles */
        body.dark {
            background-color: #0F172A;
            color: #E5E7EB;
        }
        
        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 10px;
        }
        ::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        body.dark ::-webkit-scrollbar-track {
            background: #1E293B;
        }
        ::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 5px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
        
        /* Fade in animation */
        .fade-in {
            animation: fadeIn 0.6s ease-in;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
    </style>
</head>
<body class="bg-light-bg dark:bg-dark-bg text-light-text dark:text-dark-text min-h-screen flex flex-col">
    
    <!-- Navigation -->
    <nav class="bg-light-card dark:bg-dark-card shadow-sm sticky top-0 z-50">
        <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center h-16">
                <!-- Logo/Name -->
                <a href="/" class="font-display text-2xl font-bold text-light-accent dark:text-dark-accent hover:opacity-80">
                    Omega Makena
                </a>
                
                <!-- Navigation Links -->
                <div class="hidden md:flex space-x-8 items-center">
                    <a href="/" class="text-light-text dark:text-dark-text hover:text-light-link dark:hover:text-dark-link font-medium">
                        Home
                    </a>
                    <a href="/portfolio" class="text-light-text dark:text-dark-text hover:text-light-link dark:hover:text-dark-link font-medium">
                        Portfolio
                    </a>
                    <a href="/blog" class="text-light-text dark:text-dark-text hover:text-light-link dark:hover:text-dark-link font-medium">
                        Blog
                    </a>
                    
                    <!-- Dark Mode Toggle -->
                    <button id="theme-toggle" class="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700">
                        <svg id="theme-toggle-dark-icon" class="hidden w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
                        </svg>
                        <svg id="theme-toggle-light-icon" class="hidden w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" fill-rule="evenodd" clip-rule="evenodd"></path>
                        </svg>
                    </button>
                </div>
                
                <!-- Mobile Menu Button -->
                <button id="mobile-menu-button" class="md:hidden p-2">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
                    </svg>
                </button>
            </div>
        </div>
        
        <!-- Mobile Menu -->
        <div id="mobile-menu" class="hidden md:hidden px-4 pb-4">
            <div class="flex flex-col space-y-3">
                <a href="/" class="text-light-text dark:text-dark-text hover:text-light-link dark:hover:text-dark-link font-medium">
                    Home
                </a>
                <a href="/portfolio" class="text-light-text dark:text-dark-text hover:text-light-link dark:hover:text-dark-link font-medium">
                    Portfolio
                </a>
                <a href="/blog" class="text-light-text dark:text-dark-text hover:text-light-link dark:hover:text-dark-link font-medium">
                    Blog
                </a>
            </div>
        </div>
    </nav>
    
    <!-- Main Content -->
    <main class="flex-grow">
        
<div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16 fade-in">
    
    <!-- Back Button -->
    <div class="mb-8">
        <a href="/blog" 
           class="inline-flex items-center text-light-link dark:text-dark-link hover:underline">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
            Back to Blog
        </a>
    </div>
    
    <!-- Article Header -->
    <article class="bg-light-card dark:bg-dark-card rounded-lg shadow-md p-8 md:p-12">
        <!-- Category Badge -->
        <div class="mb-4">
            <span class="inline-block px-4 py-1 bg-light-accent dark:bg-dark-accent text-white text-sm font-semibold rounded-full">
                ai-ml
            </span>
        </div>
        
        <!-- Title -->
        <h1 class="text-4xl md:text-5xl font-display font-bold mb-4 text-light-text dark:text-dark-text">
            Meta-Learning - Learning How to Learn
        </h1>
        
        <!-- Meta Info -->
        <div class="flex items-center text-light-muted dark:text-dark-muted text-sm mb-8 pb-8 border-b border-gray-200 dark:border-gray-700">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
            </svg>
            January 15, 2024
            
            <span class="mx-3">•</span>
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
            </svg>
            Omega Makena
            
        </div>
        
        <!-- Content -->
        <div class="prose prose-lg dark:prose-invert max-w-none">
            <style>
                .prose {
                    color: #1C1C1C;
                }
                .dark .prose {
                    color: #E5E7EB;
                }
                .prose h2 {
                    font-family: 'Playfair Display', serif;
                    font-size: 2rem;
                    font-weight: 700;
                    margin-top: 2rem;
                    margin-bottom: 1rem;
                    color: #1E3A8A;
                }
                .dark .prose h2 {
                    color: #93C5FD;
                }
                .prose h3 {
                    font-family: 'Playfair Display', serif;
                    font-size: 1.5rem;
                    font-weight: 600;
                    margin-top: 1.5rem;
                    margin-bottom: 0.75rem;
                    color: #1E3A8A;
                }
                .dark .prose h3 {
                    color: #93C5FD;
                }
                .prose p {
                    margin-bottom: 1.25rem;
                    line-height: 1.8;
                }
                .prose a {
                    color: #2563EB;
                    text-decoration: underline;
                }
                .dark .prose a {
                    color: #A78BFA;
                }
                .prose code {
                    background-color: #F9FAFB;
                    padding: 0.2rem 0.4rem;
                    border-radius: 0.25rem;
                    font-size: 0.9em;
                }
                .dark .prose code {
                    background-color: #1E293B;
                }
                .prose pre {
                    background-color: #F9FAFB;
                    padding: 1rem;
                    border-radius: 0.5rem;
                    overflow-x: auto;
                }
                .dark .prose pre {
                    background-color: #1E293B;
                }
                .prose blockquote {
                    border-left: 4px solid #1E3A8A;
                    padding-left: 1rem;
                    font-style: italic;
                    color: #6B7280;
                }
                .dark .prose blockquote {
                    border-left-color: #93C5FD;
                    color: #94A3B8;
                }
                .prose ul, .prose ol {
                    margin-left: 1.5rem;
                    margin-bottom: 1.25rem;
                }
                .prose li {
                    margin-bottom: 0.5rem;
                }
            </style>
            <h1>Meta-Learning: Learning How to Learn</h1>
<p>Meta-learning. Learning how to learn. What a buzzword.<br />
Search across the internet and that is the phrase you will keep finding. But in all seriousness, what does it really mean?  </p>
<p>I first came across meta-learning while working on my project <strong>KShield</strong>. If you've followed me long enough, you know what KShield is. It's a large-scale simulation and analysis system for modeling Kenya's economic dynamics. I had already decided that KShield needed to be <strong>online</strong>. We'll talk about what that means later, but in simple terms, I wanted the system to keep learning continuously, not restart or retrain from scratch every time new data appeared.  </p>
<p>When I rolled out the first version, I realized there was a problem.<br />
The data quality wasn't good. I was cold starting the system, which meant it was learning from almost nothing. The user data was also inconsistent: sometimes good, sometimes bad. Even with quality checks, bad data slipped through, and that made the online learning unstable.  </p>
<p>I needed the system to keep going, to keep absorbing, learning, and evolving, even when the input data was messy. That's when I asked myself, what if I built a <strong>knowledge layer</strong>? A layer that could remember, adapt, and make sense of information from everywhere instead of just reacting to it.  </p>
<p>As I started searching for ways to design this layer, I stumbled into <strong>meta-learning</strong>. That moment changed how I saw learning systems altogether.  </p>
<h2>What Exactly Is Meta-Learning</h2>
<p>Forget the buzzwords for a moment. Meta-learning is an approach to machine learning that focuses on teaching models <em>how to learn</em>. Instead of training a model to perform one fixed task, you train it to adapt quickly to new tasks with minimal data.  </p>
<p>The goal is not just to learn patterns in data, but to learn the process of learning itself. That is why people call it "learning to learn."  </p>
<p>In standard learning, a model is trained once and deployed. If the environment changes, you retrain from scratch. In meta-learning, the system is trained across many small tasks so that it can generalize and perform well on new, unseen tasks without starting over.  </p>
<h2>Meta-Learning Architecture</h2>
<p>A typical meta-learning system has two layers:  </p>
<ol>
<li><strong>Base learner (inner level):</strong> The model that learns to perform specific tasks. It could be a small neural network, MLP, CNN, or any model depending on the problem.  </li>
<li><strong>Meta-learner (outer level):</strong> The model that learns <em>how</em> to train the base learner. It observes how the base learner performs across different tasks and updates higher-level parameters to make future learning faster and more efficient.  </li>
</ol>
<p>The base learner focuses on what to learn. The meta-learner focuses on how to learn. Together, they create a two-level learning process that captures general strategies for adaptation.  </p>
<h2>How Meta-Learning Works</h2>
<p>Training happens in two loops:  </p>
<ol>
<li><strong>Inner loop:</strong> The base learner is trained on a small dataset for a specific task, updating its parameters through gradient descent or another optimizer.  </li>
<li><strong>Outer loop:</strong> The meta-learner evaluates how well the base learner adapted and adjusts the initialization or learning rules so that next time, adaptation happens faster.  </li>
</ol>
<p>After many iterations, the system develops an internal sense of how to learn efficiently. When it encounters a new problem, it needs only a few gradient updates to adapt.  </p>
<h2>Approaches to Meta-Learning</h2>
<p>Meta-learning methods are usually grouped by what part of the learning process they try to optimize.</p>
<ol>
<li>
<p><strong>Metric-based approaches</strong><br />
   These methods learn a similarity measure between examples. Instead of direct predictions, they compare new data with stored representations.<br />
<em>Examples:</em> Matching Networks, Prot营商ical Networks, Relation Networks.  </p>
</li>
<li>
<p><strong>Model-based approaches</strong><br />
   Here, the learner itself contains an internal memory mechanism (like an RNN or Transformer) that helps it adapt quickly.<br />
<em>Examples:</em> Meta Networks, SNAIL, LSTM-based meta-learners.  </p>
</li>
<li>
<p><strong>Optimization-based approaches</strong><br />
   These focus on improving the optimization process itself, learning better initialization or even new learning rules.<br />
<em>Examples:</em> MAML (Model-Agnostic Meta-Learning), Reptile, FOMAML, L2L (Learning to Learn).  </p>
</li>
</ol>
<h2>Algorithms Used in Meta-Learning</h2>
<p>Some of the most common algorithms include:  </p>
<ul>
<li><strong>MAML:</strong> Learns a good initialization that can be fine-tuned on new tasks with a few gradient steps.  </li>
<li><strong>FOMAML:</strong> A faster, first-order version of MAML.  </li>
<li><strong>Reptile:</strong> Simplifies MAML by removing second-order derivatives.  </li>
<li><strong>Prototypical Networks:</strong> Learns an embedding space where new examples are classified by proximity to class prototypes.  </li>
<li><strong>Matching Networks:</strong> Uses attention-based comparison for few-shot classification.  </li>
<li><strong>Meta Networks:</strong> Dynamically generates weights for another network.  </li>
<li><strong>SNAIL:</strong> Combines temporal convolution and attention to manage memory over time.  </li>
<li><strong>LEO:</strong> Learns a latent representation of tasks and performs optimization in that lower-dimensional space.  </li>
</ul>
<h2>Use Cases of Meta-Learning</h2>
<p>Meta-learning is powerful in environments where data is limited, dynamic, or distributed.</p>
<p><strong>Best used when:</strong><br />
- You only have a few examples per class (few-shot learning).<br />
- The environment changes frequently and you need continual or online learning.<br />
- Data is distributed across multiple clients, as in federated learning.<br />
- You need personalized models that adapt to individual users or conditions.<br />
- Agents operate in new environments and must adapt quickly, such as in reinforcement learning.  </p>
<p><strong>Avoid when:</strong><br />
- You already have large, static datasets.<br />
- Tasks are unrelated, offering no transfer benefit.<br />
- Compute resources are very limited.  </p>
<h2>Step-by-Step: Training a Meta-Learning Model</h2>
<h3>1. Define the problem</h3>
<p>Choose an N-way K-shot setting (for example, 5-way 1-shot). Split your dataset into train, validation, and test class sets with no overlap.</p>
<h3>2. Create tasks (episodes)</h3>
<p>For each training step, sample N classes, pick K support examples and Q query examples from each, and form an episode.</p>
<h3>3. Choose a base learner</h3>
<p>Use a small network like a 4-layer CNN, ResNet, or MLP depending on your domain.  </p>
<h3>4. Implement the inner loop</h3>
<p>Train the base learner on the support set for a few steps using a high learning rate to adapt to the current task.  </p>
<h3>5. Implement the outer loop</h3>
<p>Evaluate the adapted model on the query set. Compute gradients of this loss with respect to the original parameters and update them.  </p>
<h3>6. Repeat</h3>
<p>Train across thousands of episodes, each with different tasks, until validation accuracy stabilizes.  </p>
<h3>7. Evaluate</h3>
<p>Test on new tasks (from unseen classes) and measure average accuracy over many episodes.  </p>
<p><strong>Typical Hyperparameters</strong><br />
- N-way: 5<br />
- K-shot: 1 or 5<br />
- Query per class: 15<br />
- Inner steps: 1–5<br />
- Meta batch size: 4–16<br />
- Inner learning rate: 0.01–0.1<br />
- Outer learning rate: 1e-3–5e-4  </p>
<h2>In Case You're Wondering: Can You Have an Online Meta-Learning Model?</h2>
<p>Yes, you can. You can combine meta-learning with online learning, where the model updates continuously as new data arrives. This is especially useful when you don't have enough data to train everything upfront.  </p>
<p>However, online meta-learning requires careful design. You need enough task diversity over time for the meta-learner to actually learn how to learn. Otherwise, it risks memorizing instead of generalizing.  </p>
<p>If your data is small, you can:<br />
1. Use simulated or historical tasks for pretraining.<br />
2. Use federated or cross-domain meta-learning to gather diverse experiences without centralizing data.<br />
3. Update the meta-learner only after accumulating enough online episodes.<br />
4. Choose simpler few-shot algorithms like Prototypical Networks for small data scenarios.  </p>
<h2>Event-Based Meta-Learning</h2>
<p>A practical way to build online meta-learning is to make it event-based. Instead of updating all the time, the system collects experience in memory and updates when something significant happens.  </p>
<h3>How It Works</h3>
<ol>
<li><strong>Continuous input:</strong> New data arrives and the base learner adapts locally.  </li>
<li><strong>Memory accumulation:</strong> Each experience or gradient update is stored in a buffer.  </li>
<li><strong>Event detection:</strong> The system watches for triggers such as performance drift, domain shift, or reaching a memory threshold.  </li>
<li><strong>Meta-update:</strong> When an event occurs, the meta-learner aggregates stored experiences and performs a meta-update.  </li>
<li><strong>Reset:</strong> The memory decays or clears partially to stay efficient.  </li>
</ol>
<h3>Benefits</h3>
<ul>
<li>Stable learning because updates are spaced out and meaningful.  </li>
<li>Efficient computation since meta-updates are event-triggered.  </li>
<li>Works well under data scarcity because it learns only when the buffer is rich enough.  </li>
<li>Fits real-world processes like policy changes, trading cycles, or new user sessions.  </li>
</ul>
<h3>Typical Implementation</h3>
<ul>
<li><strong>Memory:</strong> Sliding window or replay buffer.  </li>
<li><strong>Triggers:</strong> Statistical (loss variance, gradient magnitude) or contextual (new quarter, data upload).  </li>
<li><strong>Meta-update:</strong> Aggregate buffered episodes, run a few outer-loop updates, and refresh initialization.  </li>
</ul>
<h3>When It Works Best</h3>
<ul>
<li>Data comes in irregular bursts.  </li>
<li>Environments evolve in phases rather than continuously.  </li>
<li>You need stability and interpretability in your adaptation cycle.  </li>
</ul>
<h2>Where It Clicked for Me</h2>
<p>It clicked for me because that's exactly what I needed in KShield.<br />
I didn't have enough clean data to train big models from scratch. I only had small, scattered pieces to test and learn from. The system had to keep adjusting to new information, sometimes good, sometimes bad, and still improve.  </p>
<p>That is what meta-learning offered — a way to let the model learn how to learn under scarcity. And by combining it with online and event-based learning, it could continue evolving without collapsing under bad data.  </p>
<h2>Final Thought</h2>
<p>I didn't find meta-learning in a research paper or classroom. I found it while trying to make a messy system work. It taught me that real intelligence isn't about perfection; it's about adaptability.  </p>
<p>That is what meta-learning is about — not teaching a model to know everything, but teaching it how to learn anything.  </p>
        </div>
    </article>
    
    <!-- Navigation -->
    <div class="mt-8 text-center">
        <a href="/blog" 
           class="inline-block bg-light-accent dark:bg-dark-accent text-white px-8 py-3 rounded-lg font-semibold hover:opacity-90 transition-all duration-300 hover:scale-105 shadow-md">
            View All Posts
        </a>
    </div>
    
</div>

    </main>
    
    <!-- Footer -->
    <footer class="bg-light-card dark:bg-dark-card mt-20 border-t border-gray-200 dark:border-gray-700">
        <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div class="flex flex-col md:flex-row justify-between items-center space-y-4 md:space-y-0">
                <div class="text-light-muted dark:text-dark-muted text-sm">
                    © 2025 Omega Makena. All rights reserved.
                </div>
                <div class="flex space-x-6">
                    
                    <a href="https://github.com/Omega-Makena" target="_blank" rel="noopener noreferrer" 
                       class="text-light-muted dark:text-dark-muted hover:text-light-link dark:hover:text-dark-link">
                        GitHub
                    </a>
                    
                    
                    <a href="https://www.linkedin.com/in/omega-makena" target="_blank" rel="noopener noreferrer" 
                       class="text-light-muted dark:text-dark-muted hover:text-light-link dark:hover:text-dark-link">
                        LinkedIn
                    </a>
                    
                    
                    <a href="mailto:mwebiamakenaa@gmail.com" 
                       class="text-light-muted dark:text-dark-muted hover:text-light-link dark:hover:text-dark-link">
                        Email
                    </a>
                    
                </div>
            </div>
        </div>
    </footer>
    
    <!-- Dark Mode Toggle Script -->
    <script>
        const themeToggleBtn = document.getElementById('theme-toggle');
        const themeToggleDarkIcon = document.getElementById('theme-toggle-dark-icon');
        const themeToggleLightIcon = document.getElementById('theme-toggle-light-icon');
        const mobileMenuButton = document.getElementById('mobile-menu-button');
        const mobileMenu = document.getElementById('mobile-menu');
        
        // Check for saved theme preference or default to dark mode
        const currentTheme = localStorage.getItem('theme') || 'dark';
        
        if (currentTheme === 'dark') {
            document.documentElement.classList.add('dark');
            document.body.classList.add('dark');
            themeToggleLightIcon.classList.remove('hidden');
        } else {
            themeToggleDarkIcon.classList.remove('hidden');
        }
        
        themeToggleBtn.addEventListener('click', function() {
            // Toggle icons
            themeToggleDarkIcon.classList.toggle('hidden');
            themeToggleLightIcon.classList.toggle('hidden');
            
            // Toggle dark mode
            if (document.documentElement.classList.contains('dark')) {
                document.documentElement.classList.remove('dark');
                document.body.classList.remove('dark');
                localStorage.setItem('theme', 'light');
            } else {
                document.documentElement.classList.add('dark');
                document.body.classList.add('dark');
                localStorage.setItem('theme', 'dark');
            }
        });
        
        // Mobile menu toggle
        mobileMenuButton.addEventListener('click', function() {
            mobileMenu.classList.toggle('hidden');
        });
    </script>
    
    
</body>
</html>


